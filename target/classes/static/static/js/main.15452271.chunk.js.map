{"version":3,"sources":["client.js","Notification.js","StudentDrawerForm.js","App.js","reportWebVitals.js","index.js"],"names":["checkStatus","response","ok","error","Error","statusText","Promise","reject","openNotificationWithIcon","type","message","description","placement","notification","successNotification","errorNotification","Option","Select","antIcon","LoadingOutlined","style","fontSize","spin","StudentDrawerForm","showDrawer","setShowDrawer","fetchStudents","onCLose","useState","submitting","setSubmitting","title","width","onClose","visible","bodyStyle","paddingBottom","footer","textAlign","onClick","marginRight","layout","onFinishFailed","errorInfo","alert","JSON","stringify","onFinish","student","console","log","fetch","headers","method","body","then","addNewStudent","name","catch","err","json","res","status","finally","hideRequiredMark","gutter","span","Item","label","rules","required","placeholder","value","htmlType","indicator","Header","Layout","Content","Footer","Sider","SubMenu","Menu","TheAvatar","trim","length","icon","UserOutlined","split","charAt","removeStudent","studentId","callback","deleteStudent","columns","dataIndex","key","render","text","Group","onConfirm","id","okText","cancelText","Button","App","students","setStudents","collapsed","setCollapsed","fetching","setFetching","data","useEffect","minHeight","collapsible","onCollapse","className","theme","defaultSelectedKeys","mode","PieChartOutlined","DesktopOutlined","TeamOutlined","FileOutlined","padding","margin","shape","PlusOutlined","size","dataSource","bordered","count","pagination","pageSize","scroll","y","rowKey","rel","target","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15452271.chunk.js","sourcesContent":["import fetch from 'unfetch';\r\n\r\nconst checkStatus = response => {\r\n    if (response.ok) {\r\n        return response;\r\n    }\r\n    // convert non-2xx HTTP responses into errors:\r\n    const error = new Error(response.statusText);\r\n    error.response = response;\r\n    return Promise.reject(error);\r\n}\r\n\r\nexport const getAllStudents = () =>\r\n    fetch(\"api/v1/students\")\r\n        .then(checkStatus);\r\n\r\nexport const addNewStudent = student =>\r\n    fetch(\"api/v1/students\", {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(student)\r\n        }\r\n    ).then(checkStatus)\r\n\r\nexport const deleteStudent = studentId =>\r\n    fetch(`api/v1/students/${studentId}`, {\r\n        method: 'DELETE'\r\n    }).then(checkStatus);\r\n\r\n","import {notification} from \"antd\";\r\n\r\nconst openNotificationWithIcon = (type, message, description, placement) => {\r\n    placement = placement || \"topRight\"\r\n    notification[type]({message, description, placement});\r\n}\r\n\r\nexport const successNotification = (message, description, placement) =>\r\n    openNotificationWithIcon('success', message, description, placement);\r\n\r\nexport const errorNotification = (message, description, placement) =>\r\n    openNotificationWithIcon('error', message, description, placement);\r\n\r\nexport const infoNotification = (message, description, placement) =>\r\n    openNotificationWithIcon('info', message, description, placement);\r\n\r\nexport const warningNotification = (message, description, placement) =>\r\n    openNotificationWithIcon('warning', message, description, placement);","import React from 'react';\r\nimport {Drawer, Input, Col, Select, Form, Row, Button, Spin} from 'antd';\r\nimport {addNewStudent} from \"./client\";\r\nimport {LoadingOutlined} from \"@ant-design/icons\";\r\nimport {useState} from 'react';\r\nimport {successNotification, errorNotification} from \"./Notification\";\r\n\r\nconst {Option} = Select;\r\n\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\nfunction StudentDrawerForm({showDrawer, setShowDrawer, fetchStudents}) {\r\n    const onCLose = () => setShowDrawer(false);\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    const onFinish = student => {\r\n        setSubmitting(true)\r\n        console.log(JSON.stringify(student, null, 2))\r\n        addNewStudent(student)\r\n            .then(() => {\r\n                console.log(\"student added\")\r\n                onCLose();\r\n                successNotification(\r\n                    \"Student successfully added\",\r\n                    `${student.name} was added to the system`\r\n                    )\r\n                fetchStudents();\r\n            }).catch(err => {\r\n                console.log(err);\r\n                err.response.json().then(res => {\r\n                    console.log(res);\r\n                    errorNotification(\r\n                        \"There was an issue\",\r\n                        `${res.message} [${res.status}] [${res.error}]`,\r\n                        \"bottomLeft\"\r\n                    )\r\n                });\r\n            }).finally(() => {\r\n                setSubmitting(false);\r\n            })\r\n    };\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        alert(JSON.stringify(errorInfo, null, 2));\r\n    };\r\n\r\n    return <Drawer\r\n        title=\"Create new student\"\r\n        width={720}\r\n        onClose={onCLose}\r\n        visible={showDrawer}\r\n        bodyStyle={{paddingBottom: 80}}\r\n        footer={\r\n            <div\r\n                style={{\r\n                    textAlign: 'right',\r\n                }}\r\n            >\r\n                <Button onClick={onCLose} style={{marginRight: 8}}>\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        }\r\n    >\r\n        <Form layout=\"vertical\"\r\n              onFinishFailed={onFinishFailed}\r\n              onFinish={onFinish}\r\n              hideRequiredMark>\r\n            <Row gutter={16}>\r\n                <Col span={12}>\r\n                    <Form.Item\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        rules={[{required: true, message: 'Please enter student name'}]}\r\n                    >\r\n                        <Input placeholder=\"Please enter student name\"/>\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span={12}>\r\n                    <Form.Item\r\n                        name=\"email\"\r\n                        label=\"Email\"\r\n                        rules={[{required: true, message: 'Please enter student email'}]}\r\n                    >\r\n                        <Input placeholder=\"Please enter student email\"/>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Row gutter={16}>\r\n                <Col span={12}>\r\n                    <Form.Item\r\n                        name=\"gender\"\r\n                        label=\"gender\"\r\n                        rules={[{required: true, message: 'Please select a gender'}]}\r\n                    >\r\n                        <Select placeholder=\"Please select a gender\">\r\n                            <Option value=\"MALE\">MALE</Option>\r\n                            <Option value=\"FEMALE\">FEMALE</Option>\r\n                            <Option value=\"OTHER\">OTHER</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col span={12}>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                {submitting && <Spin indicator={antIcon} />}\r\n            </Row>\r\n        </Form>\r\n    </Drawer>\r\n}\r\n\r\nexport default StudentDrawerForm;","import React , {useState, useEffect} from 'react';\r\nimport {deleteStudent, getAllStudents} from \"./client\";\r\nimport {\r\n    Layout,\r\n    Menu,\r\n    Breadcrumb,\r\n    Table,\r\n    Spin,\r\n    Empty,\r\n    Button,\r\n    Badge,\r\n    Tag,\r\n    Avatar,\r\n    Radio, \r\n    Popconfirm,\r\n    Divider\r\n} from 'antd';\r\n\r\nimport {\r\n    DesktopOutlined,\r\n    PieChartOutlined,\r\n    FileOutlined,\r\n    TeamOutlined,\r\n    UserOutlined,\r\n    LoadingOutlined,\r\n    PlusOutlined\r\n} from '@ant-design/icons';\r\nimport StudentDrawerForm from \"./StudentDrawerForm\";\r\n\r\nimport './App.css';\r\nimport {errorNotification, successNotification} from \"./Notification\";\r\n\r\n\r\nconst {Header, Content, Footer, Sider} = Layout;\r\nconst {SubMenu} = Menu;\r\n\r\nconst TheAvatar = ({name}) => {\r\n    let trim = name.trim();\r\n    if (trim.length === 0) {\r\n        return <Avatar icon={<UserOutlined/>}/>\r\n    }\r\n    const split = trim.split(\" \");\r\n    if (split.length === 1) {\r\n        return <Avatar>{name.charAt(0)}</Avatar>\r\n    }\r\n    return <Avatar>\r\n        {`${name.charAt(0)}${name.charAt(name.length - 1)}`}\r\n    </Avatar>\r\n}\r\n\r\nconst removeStudent = (studentId, callback) => {\r\n    deleteStudent(studentId).then(() => {\r\n        successNotification(\"Student deleted\", `Student with ${studentId} was deleted`);\r\n        callback();\r\n    }).catch(err => {\r\n        err.response.json().then(res => {\r\n            console.log(res);\r\n            errorNotification(\r\n                \"There was an issue\",\r\n                `${res.message} [${res.status}] [${res.error}]`\r\n            )\r\n        });\r\n    })\r\n}\r\n\r\nconst columns = fetchStudents => [\r\n    {\r\n        title: '',\r\n        dataIndex: 'avatar',\r\n        key: 'avatar',\r\n        render: (text, student) =>\r\n            <TheAvatar name={student.name}/>\r\n    },\r\n    {\r\n        title: 'Id',\r\n        dataIndex: 'id',\r\n        key: 'id',\r\n    },\r\n    {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n    },\r\n    {\r\n        title: 'Email',\r\n        dataIndex: 'email',\r\n        key: 'email',\r\n    },\r\n    {\r\n        title: 'Gender',\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n    },\r\n    {\r\n        title: 'Actions',\r\n        key: 'actions',\r\n        render: (text, student) =>\r\n            <Radio.Group>\r\n                <Popconfirm\r\n                    placement='topRight'\r\n                    title={`Are you sure to delete ${student.name}`}\r\n                    onConfirm={() => removeStudent(student.id, fetchStudents)}\r\n                    okText='Yes'\r\n                    cancelText='No'>\r\n                    <Radio.Button value=\"small\">Delete</Radio.Button>\r\n                </Popconfirm>\r\n                <Radio.Button value=\"small\">Edit</Radio.Button>\r\n            </Radio.Group>\r\n    }\r\n];\r\n\r\nconst antIcon = <LoadingOutlined style={{fontSize: 24}} spin/>;\r\n\r\nfunction App() {\r\n    const [students, setStudents] = useState([]);\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const [fetching, setFetching] = useState(true);\r\n    const [showDrawer, setShowDrawer] = useState(false);\r\n\r\n    const fetchStudents = () =>\r\n        getAllStudents()\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                setStudents(data);\r\n            }).catch(err => {\r\n                console.log(err.response)\r\n                err.response.json().then(res => {\r\n                    console.log(res);\r\n                    errorNotification(\r\n                        \"There was an issue\",\r\n                        `${res.message} [${res.status}] [${res.error}]`\r\n                    )\r\n                });\r\n            }).finally(() => setFetching(false))\r\n\r\n    useEffect(() => {\r\n        console.log(\"component is mounted\");\r\n        fetchStudents();\r\n    }, []);\r\n\r\n    const renderStudents = () => {\r\n        if (fetching) {\r\n            return <Spin indicator={antIcon}/>\r\n        }\r\n        if (students.length <= 0) {\r\n            return <>\r\n                <Button\r\n                    onClick={() => setShowDrawer(!showDrawer)}\r\n                    type=\"primary\" shape=\"round\" icon={<PlusOutlined/>} size=\"small\">\r\n                    Add New Student\r\n                </Button>\r\n                <StudentDrawerForm\r\n                    showDrawer={showDrawer}\r\n                    setShowDrawer={setShowDrawer}\r\n                    fetchStudents={fetchStudents}\r\n                />\r\n                <Empty/>\r\n            </>\r\n        }\r\n        return <>\r\n            <StudentDrawerForm\r\n                showDrawer={showDrawer}\r\n                setShowDrawer={setShowDrawer}\r\n                fetchStudents={fetchStudents}\r\n            />\r\n            <Table\r\n                dataSource={students}\r\n                columns={columns(fetchStudents)}\r\n                bordered\r\n                title={() =>\r\n                    <>\r\n                        <Tag>Number of students</Tag>\r\n                        <Badge count={students.length} className=\"site-badge-count-4\"/>\r\n                        <br/><br/>\r\n                        <Button\r\n                            onClick={() => setShowDrawer(!showDrawer)}\r\n                            type=\"primary\" shape=\"round\" icon={<PlusOutlined/>} size=\"small\">\r\n                            Add New Student\r\n                        </Button>\r\n                    </>\r\n                }\r\n                pagination={{pageSize: 50}}\r\n                scroll={{y: 500}}\r\n                rowKey={student => student.id}\r\n            />\r\n        </>\r\n    }\r\n\r\n    return <Layout style={{minHeight: '100vh'}}>\r\n        <Sider collapsible collapsed={collapsed}\r\n               onCollapse={setCollapsed}>\r\n            <div className=\"logo\"/>\r\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                <Menu.Item key=\"1\" icon={<PieChartOutlined/>}>\r\n                    Option 1\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<DesktopOutlined/>}>\r\n                    Option 2\r\n                </Menu.Item>\r\n                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"User\">\r\n                    <Menu.Item key=\"3\">Tom</Menu.Item>\r\n                    <Menu.Item key=\"4\">Bill</Menu.Item>\r\n                    <Menu.Item key=\"5\">Alex</Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"sub2\" icon={<TeamOutlined/>} title=\"Team\">\r\n                    <Menu.Item key=\"6\">Team 1</Menu.Item>\r\n                    <Menu.Item key=\"8\">Team 2</Menu.Item>\r\n                </SubMenu>\r\n                <Menu.Item key=\"9\" icon={<FileOutlined/>}>\r\n                    Files\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Sider>\r\n        <Layout className=\"site-layout\">\r\n            <Header className=\"site-layout-background\" style={{padding: 0}}/>\r\n            <Content style={{margin: '0 16px'}}>\r\n                <Breadcrumb style={{margin: '16px 0'}}>\r\n                    <Breadcrumb.Item>User</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>Bill</Breadcrumb.Item>\r\n                </Breadcrumb>\r\n                <div className=\"site-layout-background\" style={{padding: 24, minHeight: 360}}>\r\n                    {renderStudents()}\r\n                </div>\r\n            </Content>\r\n            <Footer style={{textAlign: 'center'}}>By Amigoscode</Footer>\r\n            <Divider>\r\n                <a \r\n                    rel =\"noopener noreferrer\"\r\n                    target=\"_blank\"\r\n                    href=\"https://amigoscode.com\">\r\n                    Click here!!\r\n                </a>\r\n        </Divider>\r\n        </Layout>\r\n\r\n    </Layout>\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}